plugins {
    id 'java'
    id "net.foragerr.jmeter" version "1.1.0-4.0"
}

group 'ThoughtWorks'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jmeter {
    jmTestFiles = [file("src/test/jmeter/test2.jmx")]
    csvLogFile = false
    afterEvaluate {
        def jMeterExt = project.extensions.findByName("jmeter")
        jMeterExt.metaClass.enableReports = true
        jMeterExt.metaClass.enableExtendedReports = false
        jMeterExt.metaClass.reportTitle = null
        jMeterExt.metaClass.reportPostfix = ""
        jMeterExt.metaClass.reportXslt = "$project.projectDir/build/jmeter-results-detail-report_21.xsl"

    }

}

task readXml{
    def dir = fileTree("$projectDir/gateway/build/jmeter-report/"){
        include '*.xml'
    }
    def numberOfXml = dir.getFiles().size()
    def findFiles = dir.getFiles()
//    println dir.toString()
//    println numberOfXml
    for(int i=0; i<numberOfXml; i++){
        String fileName = findFiles.getAt(i).toString()
//        println fileName
        def outputList = read(fileName)
        for(String message: outputList)
            println message
    }
}

def read(String FileName){
    def xmlSluper = new XmlSlurper()
    def result = xmlSluper.parse(file(FileName))
    def errorMessageList = result.httpSample*.assertionResult*.failureMessage;
    def outputList = new ArrayList()
    for(int i=0; i<errorMessageList.size(); i++){
        String errorTitle = result.httpSample*.@lb[i]
        String errorMessage = errorMessageList.get(i)
        if(errorMessage!=""){
            String string = "Occored a error, test case name is \""+errorTitle+"\". " + "Reason is: " + errorMessage
            outputList.add(string)
        }
    }
    return outputList
}